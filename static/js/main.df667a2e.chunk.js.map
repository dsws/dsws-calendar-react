{"version":3,"sources":["logo.svg","comps/DailyCalendar/DailyCalendar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","collisions","width","leftOffSet","DailyCalendar","state","eventNodes","componentDidMount","layOutDay","props","events","window","getCollisions","i","time","j","length","push","forEach","event","id","timeIndex","end","start","order","Math","floor","indexOf","getAttributes","period","count","reduce","a","b","EventNode","height","top","left","units","tinyMode","key","className","style","fontSize","display","marginLeft","map","setState","this","Component","App","src","logo","alt","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.df667a2e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.62fbc8ff.svg\";","import React, { Component } from \"react\";\nimport \"./DailyCalendar.css\";\n\nconst containerHeight = 720;\nconst containerWidth = 600;\nconst minutesinDay = 60 * 12;\nlet collisions = [];\nlet width = [];\nlet leftOffSet = [];\n\nclass DailyCalendar extends Component {\n  state = {\n    eventNodes: []\n  };\n\n  componentDidMount = () => {\n    this.layOutDay(this.props.events);\n    window.layOutDay = this.layOutDay;\n    // var eventNodes = this.layOutDay(this.props.events);\n  };\n\n  getCollisions = events => {\n    //resets storage\n    collisions = [];\n\n    for (var i = 0; i < 24; i++) {\n      var time = [];\n      for (var j = 0; j < events.length; j++) {\n        time.push(0);\n      }\n      collisions.push(time);\n    }\n\n    events.forEach((event, id) => {\n      let end = event.end;\n      let start = event.start;\n      let order = 1;\n      let timeIndex;\n\n      while (start < end) {\n        timeIndex = Math.floor(start / 30);\n\n        while (order < events.length) {\n          if (collisions[timeIndex].indexOf(order) === -1) {\n            break;\n          }\n          order++;\n        }\n\n        collisions[timeIndex][id] = order;\n        start = start + 30;\n      }\n\n      collisions[Math.floor((end - 1) / 30)][id] = order;\n    });\n  };\n\n  /*\n  find width and horizontal position\n  \n  width - number of units to divide container width by\n  horizontal position - pixel offset from left\n  */\n  getAttributes = events => {\n    //resets storage\n    width = [];\n    leftOffSet = [];\n\n    for (var i = 0; i < events.length; i++) {\n      width.push(0);\n      leftOffSet.push(0);\n    }\n\n    collisions.forEach(period => {\n      // number of events in that period\n      let count = period.reduce((a, b) => {\n        return b ? a + 1 : a;\n      });\n\n      if (count > 1) {\n        period.forEach((event, id) => {\n          // max number of events it is sharing a time period with determines width\n          if (period[id]) {\n            if (count > width[id]) {\n              width[id] = count;\n            }\n          }\n\n          if (period[id] && !leftOffSet[id]) {\n            leftOffSet[id] = period[id];\n          }\n        });\n      }\n    });\n  };\n\n  EventNode = (height, top, left, units) => {\n    const tinyMode = height <= 20;\n\n    return (\n      <div\n        key={height + top + left}\n        className=\"dailyCalendarNode\"\n        style={{\n          width: containerWidth / units + \"px\",\n          height: height + \"px\",\n          top: top + \"px\",\n          left: left + \"px\"\n        }}\n      >\n        <div>\n          <div\n            className=\"dailyCalendarNodeTitle\"\n            style={{\n              fontSize: height / 1.2 >= 16 ? 16 : height / 1.2,\n              display: tinyMode ? \"inline-block\" : \"block\"\n            }}\n          >\n            Sample Item\n          </div>\n          <div\n            className=\"dailyCalendarNodeLocation\"\n            style={{\n              fontSize: height / 1.2 >= 10 ? 10 : height / 1.2,\n              display: tinyMode ? \"inline-block\" : \"block\",\n              marginLeft: tinyMode ? \"10px\" : \"\"\n            }}\n          >\n            Sample Location\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  //default events given\n  // const events = [\n  //   { start: 30, end: 150 },\n  //   { start: 540, end: 600 },\n  //   { start: 560, end: 620 },\n  //   { start: 610, end: 670 }\n  // ];\n\n  layOutDay = events => {\n    // clear any existing nodes\n    // var myNode = document.getElementById(\"events\");\n    // myNode.innerHTML = \"\";\n\n    this.getCollisions(events);\n    this.getAttributes(events);\n    const eventNodes = events.map((event, id) => {\n      let height = ((event.end - event.start) / minutesinDay) * containerHeight;\n      let top = (event.start / minutesinDay) * containerHeight;\n      let units = width[id];\n      if (!units) {\n        units = 1;\n      }\n      let left = (containerWidth / width[id]) * (leftOffSet[id] - 1) + 10;\n      if (!left || left < 0) {\n        left = 10;\n      }\n\n      return this.EventNode(height, top, left, units);\n    });\n    this.setState({ eventNodes: eventNodes });\n  };\n\n  ///console.log(\"evetNodes\", props);\n\n  render() {\n    return (\n      <div className=\"dailyCalendarContainer\">\n        <div className=\"dailyCalendarTiming\">\n          <div>\n            <span> 9:00 </span> AM\n          </div>\n          <div> 9:30 </div>\n          <div>\n            <span> 10:00 </span>AM\n          </div>\n          <div> 10:30 </div>\n          <div>\n            <span> 11:00 </span>AM\n          </div>\n          <div> 11:30 </div>\n          <div>\n            <span> 12:00 </span>PM\n          </div>\n          <div> 12:30 </div>\n          <div>\n            <span> 1:00 </span>PM\n          </div>\n          <div> 1:30 </div>\n          <div>\n            <span> 2:00 </span>PM\n          </div>\n          <div> 2:30 </div>\n          <div>\n            <span> 3:00 </span>PM\n          </div>\n          <div> 3:30 </div>\n          <div>\n            <span> 4:00 </span>PM\n          </div>\n          <div> 4:30 </div>\n          <div>\n            <span> 5:00 </span>PM\n          </div>\n          <div> 5:30 </div>\n          <div>\n            <span> 6:00 </span>PM\n          </div>\n          <div> 6:30 </div>\n          <div>\n            <span> 7:00 </span>PM\n          </div>\n          <div> 7:30 </div>\n          <div>\n            <span> 8:00 </span>PM\n          </div>\n          <div> 8:30 </div>\n          <div>\n            <span> 9:00 </span>PM\n          </div>\n        </div>\n\n        <div className=\"dailyCalendarDays\">{this.state.eventNodes}</div>\n      </div>\n    );\n  }\n}\n\nexport default DailyCalendar;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport DailyCalendar from \"./comps/DailyCalendar/DailyCalendar\";\n\nconst events = [\n  { start: 30, end: 150 },\n  { start: 540, end: 600 },\n  { start: 560, end: 620 },\n  { start: 610, end: 670 }\n];\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h1>DailyCalendar by DSWS</h1>\n        <small>React fork of https://github.com/meijiao/calendar</small>\n      </header>\n      <DailyCalendar events={events} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}